<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：作用是为了分类管理映射文件中的MappedStatement对象 -->
<mapper namespace="test">
  <!--
		select\insert\update\delete标签，最终会封装到MappedStatement对象中
		id：指定MappedStatement对象的唯一标识
		对象参数绑定：使用OGNL
		parameterType：指定输入参数映射的java类型
		resultType：指定结果集映射的java类型
	 -->
  <select id="findUserById" parameterType="int" resultType="com.yw.mybatis.example.po.User">
    SELECT * FROM user WHERE id = #{id}
  </select>
  <!-- 自定义条件查询用户列表 -->
  <select id="findUserByUsername" parameterType="java.lang.String"
          resultType="com.yw.mybatis.example.po.User">
    select * from user where username like '%${value}%'
  </select>
<!--  &lt;!&ndash; 添加用户 &ndash;&gt;-->
<!--  <insert id="insertUser" parameterType="com.yw.mybatis.example.po.User">-->
<!--    insert into user(username, birthday, sex, address)-->
<!--    values(#{username}, #{birthday}, #{sex}, #{address})-->
<!--  </insert>-->
  <!-- 添加用户 -->
  <insert id="insertUser" parameterType="com.yw.mybatis.example.po.User">
    <!-- selectKey将主键返回，需要再返回 -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      select LAST_INSERT_ID()
    </selectKey>
    insert into user(username, birthday, sex, address)
    values(#{username}, #{birthday}, #{sex}, #{address})
  </insert>
  <!-- 更新用户 -->
  <update id="updateUser" parameterType="com.yw.mybatis.example.po.User">
    update user set
    username = #{username},
    birthday = #{birthday},
    sex = #{sex},
    address = #{address}
    where id = #{id}
  </update>
</mapper>